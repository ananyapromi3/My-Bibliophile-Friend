/*
 Navicat Premium Data Transfer

 Source Server         : Project
 Source Server Type    : Oracle
 Source Server Version : 190000 (Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production)
 Source Host           : 0.0.0.0:1521
 Source Schema         : PROJECT

 Target Server Type    : Oracle
 Target Server Version : 190000 (Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production)
 File Encoding         : 65001

 Date: 10/09/2023 23:37:20
*/


-- ----------------------------
-- Table structure for AUTHOR
-- ----------------------------
DROP TABLE "PROJECT"."AUTHOR";

CREATE TABLE "PROJECT"."AUTHOR" (
	"NAME" VARCHAR2(100 BYTE) VISIBLE NOT NULL,
	"BORNON" NUMBER(4, 0) VISIBLE,
	"DIEDON" NUMBER(4, 0) VISIBLE,
	"TYPE" VARCHAR2(50 BYTE) VISIBLE,
	"NATIONALITY" VARCHAR2(20 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for BOOK
-- ----------------------------
DROP TABLE "PROJECT"."BOOK";

CREATE TABLE "PROJECT"."BOOK" (
	"ISBN" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"TITLE" VARCHAR2(500 BYTE) VISIBLE NOT NULL,
	"PAGECOUNT" NUMBER(5, 0) VISIBLE,
	"LANGUAGE" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
	"PUBLISHYEAR" NUMBER(4, 0) VISIBLE,
	"PRICE" NUMBER(5, 2) VISIBLE,
	"COVERPHOTO" VARCHAR2(500 BYTE) VISIBLE,
	"PUBLISHERNAME" VARCHAR2(100 BYTE) VISIBLE,
	"SUMMARY" VARCHAR2(3500 BYTE) VISIBLE,
	"GENRE" VARCHAR2(100 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for BOOKFRIEND
-- ----------------------------
DROP TABLE "PROJECT"."BOOKFRIEND";

CREATE TABLE "PROJECT"."BOOKFRIEND" (
	"BOOKFRIENDID" NUMBER(10, 0) VISIBLE NOT NULL,
	"EMAILID" VARCHAR2(50 BYTE) VISIBLE NOT NULL
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for DELIVARYMAN
-- ----------------------------
DROP TABLE "PROJECT"."DELIVARYMAN";

CREATE TABLE "PROJECT"."DELIVARYMAN" (
	"DELIVARYMANID" NUMBER(10, 0) VISIBLE NOT NULL,
	"EMAILID" VARCHAR2(50 BYTE) VISIBLE NOT NULL
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for DELIVARYOFFER
-- ----------------------------
DROP TABLE "PROJECT"."DELIVARYOFFER";

CREATE TABLE "PROJECT"."DELIVARYOFFER" (
	"EXCHANGEID" NUMBER(10, 0) VISIBLE NOT NULL,
	"DELIVARYMANID" NUMBER(10, 0) VISIBLE,
	"FEE" NUMBER VISIBLE,
	"STATUS" VARCHAR2(50 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for EXCHANGEOFFER
-- ----------------------------
DROP TABLE "PROJECT"."EXCHANGEOFFER";

CREATE TABLE "PROJECT"."EXCHANGEOFFER" (
	"EXCHANGEID" NUMBER(10, 0) VISIBLE NOT NULL,
	"OFFERID1" NUMBER(10, 0) VISIBLE,
	"OFFERID2" NUMBER(10, 0) VISIBLE,
	"STATUS" VARCHAR2(100 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for NOTI
-- ----------------------------
DROP TABLE "PROJECT"."NOTI";

CREATE TABLE "PROJECT"."NOTI" (
	"MSG" VARCHAR2(500 BYTE) VISIBLE,
	"TIME" DATE VISIBLE,
	"EMAILID" VARCHAR2(100 BYTE) VISIBLE,
	"STATUS" VARCHAR2(50 BYTE) VISIBLE,
	"NOTIID" NUMBER VISIBLE NOT NULL
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for NOTIFICATION1
-- ----------------------------
DROP TABLE "PROJECT"."NOTIFICATION1";

CREATE TABLE "PROJECT"."NOTIFICATION1" (
	"NOTIFICATIONID" NUMBER(10, 0) VISIBLE NOT NULL,
	"EMAILWHOREQUESTED" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"OFFERID" NUMBER(10, 0) VISIBLE NOT NULL,
	"STATUS" VARCHAR2(20 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for OFFER
-- ----------------------------
DROP TABLE "PROJECT"."OFFER";

CREATE TABLE "PROJECT"."OFFER" (
	"OFFERID" NUMBER(10, 0) VISIBLE NOT NULL,
	"MESSAGE" VARCHAR2(500 BYTE) VISIBLE,
	"BOOKCONDITIONPHOTO" VARCHAR2(500 BYTE) VISIBLE NOT NULL,
	"USEREMAILID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"ISBN" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"TIME" TIMESTAMP(6) VISIBLE,
	"STATUS" VARCHAR2(10 BYTE) VISIBLE,
	"BOOKCONDITIONPHOTO1" VARCHAR2(500 BYTE) VISIBLE,
	"BOOKCONDITIONPHOTO2" VARCHAR2(500 BYTE) VISIBLE,
	"BOOKCONDITIONPHOTO3" VARCHAR2(500 BYTE) VISIBLE,
	"BOOKCONDITIONPHOTO4" VARCHAR2(500 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for PUBLISHER
-- ----------------------------
DROP TABLE "PROJECT"."PUBLISHER";

CREATE TABLE "PROJECT"."PUBLISHER" (
	"NAME" VARCHAR2(100 BYTE) VISIBLE NOT NULL,
	"ADDRESS" VARCHAR2(200 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for USERMAN
-- ----------------------------
DROP TABLE "PROJECT"."USERMAN";

CREATE TABLE "PROJECT"."USERMAN" (
	"EMAILID" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"PASSWORD" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"FIRSTNAME" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"DATEOFBIRTH" DATE VISIBLE NOT NULL,
	"GENDER" VARCHAR2(10 BYTE) VISIBLE NOT NULL,
	"LASTNAME" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"LATITUDE" NUMBER(10, 7) VISIBLE NOT NULL,
	"LONGITUDE" NUMBER(10, 7) VISIBLE NOT NULL,
	"CONTACTNO1" VARCHAR2(20 BYTE) VISIBLE,
	"CONTACTNO2" VARCHAR2(20 BYTE) VISIBLE
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Table structure for WRITTENBY
-- ----------------------------
DROP TABLE "PROJECT"."WRITTENBY";

CREATE TABLE "PROJECT"."WRITTENBY" (
	"ISBN" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
	"NAME" VARCHAR2(100 BYTE) VISIBLE NOT NULL
) LOGGING NOCOMPRESS PCTFREE 10 INITRANS 1 STORAGE (
	INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645 BUFFER_POOL DEFAULT
) PARALLEL 1 NOCACHE DISABLE ROW MOVEMENT;

-- ----------------------------
-- Function structure for ACCEPT_OFFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ACCEPT_OFFER" AS
BEGIN
	SELECT
		STATUS INTO TEMP
	FROM
		OFFER
	WHERE
		OFFERID = OFFID;
	IF TEMP = 'offered' THEN
		UPDATE OFFER
		SET
			STATUS = 'pending'
		WHERE
			OFFERID = OFFID;
		MSG := 'CREATED';
	ELSE
		MSG := 'FAILED';
	END IF;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ACCEPT_OFFER_FINALLY
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ACCEPT_OFFER_FINALLY" AS
BEGIN
	SELECT
		STATUS INTO TEMP
	FROM
		OFFER
	WHERE
		OFFERID = OFFID;
	IF TEMP <> 'accepted' THEN
		UPDATE OFFER
		SET
			STATUS = 'accepted'
		WHERE
			OFFERID = OFFID;
		MSG := 'CREATED';
	ELSE
		MSG := 'FAILED';
	END IF;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ADD_AUTHOR
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ADD_AUTHOR" AS
BEGIN
	INSERT INTO AUTHOR VALUES(
		NAME,
		BORNON,
		DIEDON,
		TYP,
		NAT
	);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ADD_BOOK
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ADD_BOOK" AS
BEGIN
	INSERT INTO BOOK VALUES (
		ISBN,
		TITLE,
		PC,
		LAN,
		PUBYEAR,
		PRICE,
		NULL,
		PUBLISHER,
		SUMM,
		GENRE
	);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ADD_BOOK_WRITER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ADD_BOOK_WRITER" AS
BEGIN
	INSERT INTO WRITTENBY VALUES (
		ISBN,
		NAME
	);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ADD_PUBLISHER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ADD_PUBLISHER" AS
BEGIN
	INSERT INTO PUBLISHER VALUES (
		NAME,
		ADDR
	);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ADD_TO_BOOKFRIEND
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ADD_TO_BOOKFRIEND" AS
BEGIN
	INSERT INTO BOOKFRIEND VALUES(
		GET_NEXT_ID_BOOKFRIEND,
		EMAIL
	);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for ADD_TO_DELIVARYMAN
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."ADD_TO_DELIVARYMAN" AS
BEGIN
	INSERT INTO DELIVARYMAN VALUES(
		GET_NEXT_ID_DELIVARYMAN,
		EMAIL
	);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for CALCULATE_DISTANCE
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."CALCULATE_DISTANCE" AS
BEGIN
	R := 6371; -- Earth's radius in kilometers
	DLAT := (LAT2 - LAT1) * 3.14159265358979323846 / 180;
	DLON := (LON2 - LON1) * 3.14159265358979323846 / 180;
	A := SIN(DLAT / 2) * SIN(DLAT / 2) + COS(LAT1 * 3.14159265358979323846 / 180) * COS(LAT2 * 3.14159265358979323846 / 180) * SIN(DLON / 2) * SIN(DLON / 2);
	C := 2 * ATAN2(SQRT(A), SQRT(1 - A));
	DISTANCE := R * C;
	RETURN DISTANCE;
END;
/
 -- ----------------------------
 -- Function structure for CONFIRM_DELIVARY
 -- ----------------------------
 CREATE OR REPLACE PROCEDURE "PROJECT"."CONFIRM_DELIVARY" AS
BEGIN
	INSERT INTO DELIVARYOFFER VALUES(
		EID,
		DELID,
		FEE,
		'pending'
	);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for CREATE_EXCHANGE_OFFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."CREATE_EXCHANGE_OFFER" AS
BEGIN
	INSERT INTO EXCHANGEOFFER VALUES(
		GET_NEXT_EXCHANGEID,
		OFFERID1,
		OFFERID2,
		'PENDING'
	);
	MSG := 'SUCCESS';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'ERROR';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for CREATE_NOTIFICATION1
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."CREATE_NOTIFICATION1" AS
BEGIN
	C := GET_NEXT_ID_NOTIFICATION1;
	STAT := 'show';
	EMAIL := GET_EMAIL_FROM_BOOKFRIENDID(USERID);
	INSERT INTO NOTIFICATION1 VALUES (
		C,
		EMAIL,
		OFFERID,
		STAT
	);
	MSG := 'NOTIFICATION1 SENT';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for CREATE_OFFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."CREATE_OFFER" AS
BEGIN
	IF PHOTO1='' THEN
		PHT1:=NULL;
	ELSE
		PHT1:=PHOTO1;
	END IF;
	IF PHOTO2='' THEN
		PHT2:=NULL;
	ELSE
		PHT2:=PHOTO2;
	END IF;
	IF PHOTO3='' THEN
		PHT3:=NULL;
	ELSE
		PHT3:=PHOTO3;
	END IF;
	IF PHOTO4='' THEN
		PHT4:=NULL;
	ELSE
		PHT4:=PHOTO4;
	END IF;
	INSERT INTO OFFER VALUES (
		GET_NEXT_OFFERID,
		MSG,
		PHOTO,
		GET_EMAIL_FROM_BOOKFRIENDID(ID),
		ISBN,
		SYSTIMESTAMP,
		'offered',
		PHT1,
		PHT2,
		PHT3,
		PHT4
	);
	MSG2 := 'OFFER CREATED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG2 := 'ERROR';
	WHEN OTHERS THEN
		MSG2 := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for DECLINE_OFFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."DECLINE_OFFER" AS
BEGIN
	BEGIN
		DELETE FROM NOTIFICATION1
		WHERE
			NOTIFICATIONID=NOTIID;
		DELETE FROM NOTIFICATION1
		WHERE
			NOTIFICATIONID=NOTIID;
		MSG := 'DECLINED';
		MSG := 'DECLINED';
	EXCEPTION
		EXCEPTION
		WHEN NO_DATA_FOUND THEN
		WHEN NO_DATA_FOUND THEN
			MSG := 'NO DATA';
			MSG := 'NO DATA';
		WHEN TOO_MANY_ROWS THEN
		WHEN TOO_MANY_ROWS THEN
			MSG := 'MANY ROWS';
			MSG := 'MANY ROWS';
		WHEN INVALID_NUMBER THEN
		WHEN INVALID_NUMBER THEN
			MSG := 'CONVERSION FAILED';
			MSG := 'CONVERSION FAILED';
		WHEN VALUE_ERROR THEN
		WHEN VALUE_ERROR THEN
			MSG := 'VALUE ERROR';
			MSG := 'VALUE ERROR';
		WHEN ZERO_DIVIDE THEN
		WHEN ZERO_DIVIDE THEN
			MSG := '0 DEVIDE';
			MSG := '0 DEVIDE';
		WHEN OTHERS THEN
		WHEN OTHERS THEN
			MSG := 'UNKNOWN ERROR';
			MSG := 'UNKNOWN ERROR';
	END;
END;
/

-- ----------------------------
-- Function structure for DELETE_OFFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."DELETE_OFFER" AS
BEGIN
	DELETE FROM OFFER
	WHERE
		OFFERID = OFFER_ID;
	MSG := 'DELETED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'ERROR';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for DISABLE_EXCHANGEOFFER
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."DISABLE_EXCHANGEOFFER" AS
BEGIN
	UPDATE EXCHANGEOFFER
	SET
		STATUS = 'DONE'
	WHERE
		EXCHANGEID = ID;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for DISABLE_NOTIFICATION
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."DISABLE_NOTIFICATION" AS
BEGIN
	UPDATE NOTIFICATION1
	SET
		STATUS = 'done'
	WHERE
		NOTIFICATIONID = ID;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for GET_BOOK_NAME_FROM_OFFERID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_BOOK_NAME_FROM_OFFERID" AS
BEGIN
	SELECT
		B.TITLE INTO BOOKNAME
	FROM
		BOOK  B
		JOIN OFFER O
		ON O.ISBN=B.ISBN
	WHERE
		O.OFFERID=ID;
	RETURN BOOKNAME;
END;
/

-- ----------------------------
-- Function structure for GET_CONTACT_FROM_EMAIL
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_CONTACT_FROM_EMAIL" AS
BEGIN
	SELECT
		CONTACTNO1 INTO CONTACT
	FROM
		USERMAN
	WHERE
		EMAILID=EMAIL;
	RETURN CONTACT;
END;
/

-- ----------------------------
-- Function structure for GET_EMAIL_FROM_BOOKFRIENDID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_EMAIL_FROM_BOOKFRIENDID" AS
BEGIN
	SELECT
		EMAILID INTO EMAIL
	FROM
		BOOKFRIEND
	WHERE
		BOOKFRIENDID=ID;
	RETURN EMAIL;
END;
/

-- ----------------------------
-- Function structure for GET_EMAIL_FROM_DELIVARYMANID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_EMAIL_FROM_DELIVARYMANID" AS
BEGIN
	SELECT
		EMAILID INTO EMAIL
	FROM
		DELIVARYMAN
	WHERE
		DELIVARYMANID=ID;
	RETURN EMAIL;
END;
/

-- ----------------------------
-- Function structure for GET_EMAIL_FROM_OFFERID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_EMAIL_FROM_OFFERID" AS
BEGIN
	SELECT
		USEREMAILID INTO EMAIL
	FROM
		OFFER
	WHERE
		OFFERID=ID;
	RETURN EMAIL;
END;
/

-- ----------------------------
-- Function structure for GET_LATITUDE_FROM_EMAIL
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_LATITUDE_FROM_EMAIL" AS
BEGIN
	SELECT
		LATITUDE INTO LAT
	FROM
		USERMAN
	WHERE
		EMAILID = EMAIL;
	RETURN LAT;
END;
/

-- ----------------------------
-- Function structure for GET_LONGITUDE_FROM_EMAIL
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_LONGITUDE_FROM_EMAIL" AS
BEGIN
	SELECT
		LONGITUDE INTO LON
	FROM
		USERMAN
	WHERE
		EMAILID = EMAIL;
	RETURN LON;
END;
/

-- ----------------------------
-- Function structure for GET_NAME_FROM_EMAILID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NAME_FROM_EMAILID" AS
BEGIN
	SELECT
		FIRSTNAME
		|| ' '
		|| LASTNAME INTO NAME
	FROM
		USERMAN
	WHERE
		EMAILID = EMAIL;
	RETURN NAME;
END;
/

-- ----------------------------
-- Function structure for GET_NEXT_EXCHANGEID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NEXT_EXCHANGEID" AS
BEGIN
	SELECT
		MAX(EXCHANGEID) INTO ID
	FROM
		EXCHANGEOFFER;
	IF ID IS NULL THEN
		ID := 1000;
	END IF;
	ID := ID + 1;
	RETURN ID;
END;
/

-- ----------------------------
-- Function structure for GET_NEXT_ID_BOOKFRIEND
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NEXT_ID_BOOKFRIEND" AS
BEGIN
	SELECT
		MAX(BOOKFRIENDID) INTO C
	FROM
		BOOKFRIEND;
	IF C IS NULL THEN
		C := 1000;
	END IF;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for GET_NEXT_ID_DELIVARYMAN
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NEXT_ID_DELIVARYMAN" AS
BEGIN
	SELECT
		MAX(DELIVARYMANID) INTO C
	FROM
		DELIVARYMAN;
	IF C IS NULL THEN
		C := 5000;
	END IF;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for GET_NEXT_ID_NOTIFICATION1
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NEXT_ID_NOTIFICATION1" AS
BEGIN
	SELECT
		MAX(NOTIFICATIONID) INTO C
	FROM
		NOTIFICATION1;
	IF C IS NULL THEN
		C := 1000;
	END IF;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for GET_NEXT_NOTIID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NEXT_NOTIID" AS
BEGIN
	SELECT
		MAX(NOTIID) INTO ID
	FROM
		NOTI;
	IF ID IS NULL THEN
		ID := 0;
	END IF;
	ID := ID + 1;
	RETURN ID;
END;
/

-- ----------------------------
-- Function structure for GET_NEXT_OFFERID
-- ----------------------------
CREATE OR REPLACE FUNCTION "PROJECT"."GET_NEXT_OFFERID" AS
BEGIN
	SELECT
		MAX(OFFERID) INTO ID
	FROM
		OFFER;
	IF ID IS NULL THEN
		ID := 1000;
	END IF;
	ID := ID + 1;
	RETURN ID;
END;
/

-- ----------------------------
-- Function structure for SIGNUP
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."SIGNUP" AS
BEGIN
	INSERT INTO USERMAN VALUES(
		EMAIL,
		PASSWORD,
		FIRSTNAME,
		DATEOFBIRTH,
		GENDER,
		LASTNAME,
		LATITUDE,
		LONGITUDE,
		CONTACTNO1,
		CONTACTNO2
	);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
/

-- ----------------------------
-- Function structure for UPDATE_PASS
-- ----------------------------
CREATE OR REPLACE PROCEDURE "PROJECT"."UPDATE_PASS" AS
BEGIN
	SELECT
		UTL_RAW.CAST_TO_VARCHAR2(DBMS_CRYPTO.DECRYPT(PASSWORD, 4353, UTL_RAW.CAST_TO_RAW ('MyBibliophileFriend'))) INTO PASS
	FROM
		USERMAN
	WHERE
		EMAILID=EMAIL;
	IF PASS = OLDPASS THEN
		UPDATE USERMAN
		SET
			PASSWORD = DBMS_CRYPTO.ENCRYPT(
				UTL_RAW.CAST_TO_RAW(NEWPASS),
				4353,
				UTL_RAW.CAST_TO_RAW ('MyBibliophileFriend')
			)
		WHERE
			EMAILID = EMAIL;
		MSG := 'SUCCESSFUL';
	ELSE
		MSG := 'UNSUCCESSFUL';
	END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table AUTHOR
-- ----------------------------
ALTER TABLE "PROJECT"."AUTHOR" ADD CONSTRAINT "SYS_C008082" PRIMARY KEY ("NAME");

-- ----------------------------
-- Checks structure for table AUTHOR
-- ----------------------------
ALTER TABLE "PROJECT"."AUTHOR" ADD CONSTRAINT "SYS_C008081" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table BOOK
-- ----------------------------
ALTER TABLE "PROJECT"."BOOK" ADD CONSTRAINT "SYS_C008116" PRIMARY KEY ("ISBN");

-- ----------------------------
-- Checks structure for table BOOK
-- ----------------------------
ALTER TABLE "PROJECT"."BOOK" ADD CONSTRAINT "SYS_C008112" CHECK ("ISBN" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."BOOK" ADD CONSTRAINT "SYS_C008113" CHECK ("TITLE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."BOOK" ADD CONSTRAINT "SYS_C008114" CHECK ("LANGUAGE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table BOOK
-- ----------------------------
CREATE TRIGGER "PROJECT"."INITCAP_LAN" BEFORE
	INSERT ON "PROJECT"."BOOK" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
BEGIN
	:NEW.LANGUAGE := INITCAP(:NEW.LANGUAGE);
END;
/

-- ----------------------------
-- Primary Key structure for table BOOKFRIEND
-- ----------------------------
ALTER TABLE "PROJECT"."BOOKFRIEND" ADD CONSTRAINT "SYS_C008159" PRIMARY KEY ("EMAILID");

-- ----------------------------
-- Uniques structure for table BOOKFRIEND
-- ----------------------------
ALTER TABLE "PROJECT"."BOOKFRIEND" ADD CONSTRAINT "SYS_C008160" UNIQUE ("BOOKFRIENDID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table BOOKFRIEND
-- ----------------------------
ALTER TABLE "PROJECT"."BOOKFRIEND" ADD CONSTRAINT "SYS_C008157" CHECK ("BOOKFRIENDID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."BOOKFRIEND" ADD CONSTRAINT "SYS_C008158" CHECK ("EMAILID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table DELIVARYMAN
-- ----------------------------
ALTER TABLE "PROJECT"."DELIVARYMAN" ADD CONSTRAINT "SYS_C008154" PRIMARY KEY ("EMAILID");

-- ----------------------------
-- Uniques structure for table DELIVARYMAN
-- ----------------------------
ALTER TABLE "PROJECT"."DELIVARYMAN" ADD CONSTRAINT "SYS_C008155" UNIQUE ("DELIVARYMANID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Checks structure for table DELIVARYMAN
-- ----------------------------
ALTER TABLE "PROJECT"."DELIVARYMAN" ADD CONSTRAINT "SYS_C008152" CHECK ("DELIVARYMANID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."DELIVARYMAN" ADD CONSTRAINT "SYS_C008153" CHECK ("EMAILID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table DELIVARYOFFER
-- ----------------------------
ALTER TABLE "PROJECT"."DELIVARYOFFER" ADD CONSTRAINT "SYS_C008254" PRIMARY KEY ("EXCHANGEID");

-- ----------------------------
-- Triggers structure for table DELIVARYOFFER
-- ----------------------------
CREATE TRIGGER "PROJECT"."CREATE_NOTI_FOR_DELIVERY_ACC" AFTER
	INSERT ON "PROJECT"."DELIVARYOFFER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
	EMAIL1 VARCHAR2(100);
	EMAIL2 VARCHAR2(100);
	NAME1  VARCHAR2(500);
	FEE    NUMBER;
	OFFER1 NUMBER;
	OFFER2 NUMBER;
BEGIN
	FEE := ROUND(:NEW.FEE/2, 2);
	SELECT
		OFFERID1 INTO OFFER1
	FROM
		EXCHANGEOFFER
	WHERE
		EXCHANGEID=:NEW.EXCHANGEID;
	SELECT
		OFFERID2 INTO OFFER2
	FROM
		EXCHANGEOFFER
	WHERE
		EXCHANGEID=:NEW.EXCHANGEID;
	EMAIL1 := GET_EMAIL_FROM_OFFERID(OFFER1);
	EMAIL2 := GET_EMAIL_FROM_OFFERID(OFFER2);
	NAME1 := GET_NAME_FROM_EMAILID(GET_EMAIL_FROM_DELIVARYMANID(:NEW.DELIVARYMANID));
	INSERT INTO NOTI VALUES (
		'Delivery man '
		||NAME1
		||' has accepted your order #BIB'
		||:NEW.EXCHANGEID
		||'. Delivery charge: '
		||FEE
		||'tk',
		SYSDATE,
		EMAIL1,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
	INSERT INTO NOTI VALUES (
		'Delivery man '
		||NAME1
		||' has accepted your order #BIB'
		||:NEW.EXCHANGEID
		||'. Delivery charge: '
		||FEE
		||'tk',
		SYSDATE,
		EMAIL2,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
END;
/

CREATE TRIGGER "PROJECT"."CREATE_NOTI_FOR_DELIVERY_COMP" AFTER
	UPDATE OF "STATUS" ON "PROJECT"."DELIVARYOFFER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW WHEN (NEW.STATUS='Delivered')
DECLARE
	EMAIL1 VARCHAR2(100);
	EMAIL2 VARCHAR2(100);
	NAME1  VARCHAR2(500);
	FEE    NUMBER;
	OFFER1 NUMBER;
	OFFER2 NUMBER;
BEGIN
	FEE := ROUND(:NEW.FEE/2, 2);
	SELECT
		OFFERID1 INTO OFFER1
	FROM
		EXCHANGEOFFER
	WHERE
		EXCHANGEID=:NEW.EXCHANGEID;
	SELECT
		OFFERID2 INTO OFFER2
	FROM
		EXCHANGEOFFER
	WHERE
		EXCHANGEID=:NEW.EXCHANGEID;
	EMAIL1 := GET_EMAIL_FROM_OFFERID(OFFER1);
	EMAIL2 := GET_EMAIL_FROM_OFFERID(OFFER2);
	NAME1 := GET_NAME_FROM_EMAILID(GET_EMAIL_FROM_DELIVARYMANID(:NEW.DELIVARYMANID));
	INSERT INTO NOTI VALUES (
		'Delivery man '
		||NAME1
		||' has completed your order #BIB'
		||:NEW.EXCHANGEID,
		SYSDATE,
		EMAIL1,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
	INSERT INTO NOTI VALUES (
		'Delivery man '
		||NAME1
		||' has completed your order #BIB'
		||:NEW.EXCHANGEID,
		SYSDATE,
		EMAIL2,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
END;
/

-- ----------------------------
-- Primary Key structure for table EXCHANGEOFFER
-- ----------------------------
ALTER TABLE "PROJECT"."EXCHANGEOFFER" ADD CONSTRAINT "SYS_C008228" PRIMARY KEY ("EXCHANGEID");

-- ----------------------------
-- Checks structure for table EXCHANGEOFFER
-- ----------------------------
ALTER TABLE "PROJECT"."EXCHANGEOFFER" ADD CONSTRAINT "SYS_C008227" CHECK ("EXCHANGEID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table EXCHANGEOFFER
-- ----------------------------
CREATE TRIGGER "PROJECT"."EXCHANGE_NOTIFICATION" AFTER
	INSERT ON "PROJECT"."EXCHANGEOFFER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
	EMAIL1 VARCHAR2(100);
	EMAIL2 VARCHAR2(100);
	NAME1  VARCHAR2(100);
	NAME2  VARCHAR2(100);
	BOOK1  VARCHAR2(500);
	BOOK2  VARCHAR2(500);
BEGIN
	EMAIL1 := GET_EMAIL_FROM_OFFERID(:NEW.OFFERID1);
	EMAIL2 := GET_EMAIL_FROM_OFFERID(:NEW.OFFERID2);
	BOOK1 := GET_BOOK_NAME_FROM_OFFERID(:NEW.OFFERID1);
	BOOK2 := GET_BOOK_NAME_FROM_OFFERID(:NEW.OFFERID2);
	NAME1 := GET_NAME_FROM_EMAILID(EMAIL1);
	NAME2 := GET_NAME_FROM_EMAILID(EMAIL2);
	INSERT INTO NOTI VALUES (
		NAME2
		||' will exchage '
		||BOOK2
		||' with your '
		||BOOK1
		||'. Order ID: #BIB'
		||:NEW.EXCHANGEID,
		SYSDATE,
		EMAIL1,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
	INSERT INTO NOTI VALUES (
		NAME1
		||' will exchage '
		||BOOK1
		||' with your '
		||BOOK2
		||'. Order ID: #BIB'
		||:NEW.EXCHANGEID,
		SYSDATE,
		EMAIL2,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
END;
/

-- ----------------------------
-- Primary Key structure for table NOTI
-- ----------------------------
ALTER TABLE "PROJECT"."NOTI" ADD CONSTRAINT "SYS_C008290" PRIMARY KEY ("NOTIID");

-- ----------------------------
-- Primary Key structure for table NOTIFICATION1
-- ----------------------------
ALTER TABLE "PROJECT"."NOTIFICATION1" ADD CONSTRAINT "SYS_C008203" PRIMARY KEY ("NOTIFICATIONID");

-- ----------------------------
-- Checks structure for table NOTIFICATION1
-- ----------------------------
ALTER TABLE "PROJECT"."NOTIFICATION1" ADD CONSTRAINT "SYS_C008200" CHECK ("NOTIFICATIONID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."NOTIFICATION1" ADD CONSTRAINT "SYS_C008201" CHECK ("EMAILWHOREQUESTED" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."NOTIFICATION1" ADD CONSTRAINT "SYS_C008202" CHECK ("OFFERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table NOTIFICATION1
-- ----------------------------
CREATE TRIGGER "PROJECT"."ACC_OFFER" AFTER
	INSERT ON "PROJECT"."NOTIFICATION1" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
	STAT VARCHAR2(100);
BEGIN
	SELECT
		STATUS INTO STAT
	FROM
		OFFER
	WHERE
		OFFERID=:NEW.OFFERID;
	IF STAT = 'offered' THEN
		UPDATE OFFER
		SET
			STATUS = 'pending'
		WHERE
			OFFERID=:NEW.OFFERID;
	END IF;
END;
/

CREATE TRIGGER "PROJECT"."DECLINE_OFFER" AFTER
	DELETE ON "PROJECT"."NOTIFICATION1" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
	STAT VARCHAR2(100);
BEGIN
	SELECT
		STATUS INTO STAT
	FROM
		OFFER
	WHERE
		OFFERID=:OLD.OFFERID;
	IF STAT = 'pending' THEN
		UPDATE OFFER
		SET
			STATUS = 'offered'
		WHERE
			OFFERID=:OLD.OFFERID;
	END IF;
END;
/

CREATE TRIGGER "PROJECT"."DECLINE_OFFER_NOTI" AFTER
	DELETE ON "PROJECT"."NOTIFICATION1" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
BEGIN
	INSERT INTO NOTI VALUES (
		GET_NAME_FROM_EMAILID(GET_EMAIL_FROM_OFFERID(:OLD.OFFERID))
		||' has declined your request for exchanging '
		||GET_BOOK_NAME_FROM_OFFERID(:OLD.OFFERID),
		SYSDATE,
		:OLD.EMAILWHOREQUESTED,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
END;
/

CREATE TRIGGER "PROJECT"."OFFER_STATUS_CHANGE" AFTER
	INSERT ON "PROJECT"."NOTIFICATION1" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW
DECLARE
	EMAIL1 VARCHAR2( 100 );
	NAME2  VARCHAR2(100);
	BOOK1  VARCHAR2(500);
BEGIN
	EMAIL1 := GET_EMAIL_FROM_OFFERID(:NEW.OFFERID);
	NAME2 := GET_NAME_FROM_EMAILID(:NEW.EMAILWHOREQUESTED);
	BOOK1 := GET_BOOK_NAME_FROM_OFFERID(:NEW.OFFERID);
	INSERT INTO NOTI VALUES (
		NAME2
		||' wants to accept your offer of exchanging '
		||BOOK1,
		SYSDATE,
		EMAIL1,
		'UNREAD',
		GET_NEXT_NOTIID()
	);
END;
/

-- ----------------------------
-- Primary Key structure for table OFFER
-- ----------------------------
ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008174" PRIMARY KEY ("OFFERID");

-- ----------------------------
-- Checks structure for table OFFER
-- ----------------------------
ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008170" CHECK ("OFFERID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008171" CHECK ("BOOKCONDITIONPHOTO" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008172" CHECK ("USEREMAILID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008173" CHECK ("ISBN" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table PUBLISHER
-- ----------------------------
ALTER TABLE "PROJECT"."PUBLISHER" ADD CONSTRAINT "SYS_C008087" PRIMARY KEY ("NAME");

-- ----------------------------
-- Checks structure for table PUBLISHER
-- ----------------------------
ALTER TABLE "PROJECT"."PUBLISHER" ADD CONSTRAINT "SYS_C008086" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table USERMAN
-- ----------------------------
ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008150" PRIMARY KEY ("EMAILID");

-- ----------------------------
-- Checks structure for table USERMAN
-- ----------------------------
ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008141" CHECK ("EMAILID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008142" CHECK ("PASSWORD" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008144" CHECK ("FIRSTNAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008145" CHECK ("DATEOFBIRTH" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008146" CHECK ("GENDER" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008147" CHECK ("LASTNAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008148" CHECK ("LATITUDE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."USERMAN" ADD CONSTRAINT "SYS_C008149" CHECK ("LONGITUDE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table WRITTENBY
-- ----------------------------
ALTER TABLE "PROJECT"."WRITTENBY" ADD CONSTRAINT "SYS_C008138" PRIMARY KEY ("ISBN", "NAME");

-- ----------------------------
-- Checks structure for table WRITTENBY
-- ----------------------------
ALTER TABLE "PROJECT"."WRITTENBY" ADD CONSTRAINT "SYS_C008136" CHECK ("ISBN" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."WRITTENBY" ADD CONSTRAINT "SYS_C008137" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BOOK
-- ----------------------------
ALTER TABLE "PROJECT"."BOOK" ADD CONSTRAINT "SYS_C008117" FOREIGN KEY ("PUBLISHERNAME") REFERENCES "PROJECT"."PUBLISHER" ("NAME") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table BOOKFRIEND
-- ----------------------------
ALTER TABLE "PROJECT"."BOOKFRIEND" ADD CONSTRAINT "SYS_C008161" FOREIGN KEY ("EMAILID") REFERENCES "PROJECT"."USERMAN" ("EMAILID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DELIVARYMAN
-- ----------------------------
ALTER TABLE "PROJECT"."DELIVARYMAN" ADD CONSTRAINT "SYS_C008156" FOREIGN KEY ("EMAILID") REFERENCES "PROJECT"."USERMAN" ("EMAILID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table DELIVARYOFFER
-- ----------------------------
ALTER TABLE "PROJECT"."DELIVARYOFFER" ADD CONSTRAINT "SYS_C008255" FOREIGN KEY ("EXCHANGEID") REFERENCES "PROJECT"."EXCHANGEOFFER" ("EXCHANGEID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."DELIVARYOFFER" ADD CONSTRAINT "SYS_C008256" FOREIGN KEY ("DELIVARYMANID") REFERENCES "PROJECT"."DELIVARYMAN" ("DELIVARYMANID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table EXCHANGEOFFER
-- ----------------------------
ALTER TABLE "PROJECT"."EXCHANGEOFFER" ADD CONSTRAINT "SYS_C008229" FOREIGN KEY ("OFFERID1") REFERENCES "PROJECT"."OFFER" ("OFFERID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."EXCHANGEOFFER" ADD CONSTRAINT "SYS_C008230" FOREIGN KEY ("OFFERID2") REFERENCES "PROJECT"."OFFER" ("OFFERID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table NOTI
-- ----------------------------
ALTER TABLE "PROJECT"."NOTI" ADD CONSTRAINT "FK_NOTI_EMAIL" FOREIGN KEY ("EMAILID") REFERENCES "PROJECT"."USERMAN" ("EMAILID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table NOTIFICATION1
-- ----------------------------
ALTER TABLE "PROJECT"."NOTIFICATION1" ADD CONSTRAINT "SYS_C008204" FOREIGN KEY ("OFFERID") REFERENCES "PROJECT"."OFFER" ("OFFERID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table OFFER
-- ----------------------------
ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008175" FOREIGN KEY ("USEREMAILID") REFERENCES "PROJECT"."BOOKFRIEND" ("EMAILID") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."OFFER" ADD CONSTRAINT "SYS_C008176" FOREIGN KEY ("ISBN") REFERENCES "PROJECT"."BOOK" ("ISBN") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table WRITTENBY
-- ----------------------------
ALTER TABLE "PROJECT"."WRITTENBY" ADD CONSTRAINT "SYS_C008139" FOREIGN KEY ("ISBN") REFERENCES "PROJECT"."BOOK" ("ISBN") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

ALTER TABLE "PROJECT"."WRITTENBY" ADD CONSTRAINT "SYS_C008140" FOREIGN KEY ("NAME") REFERENCES "PROJECT"."AUTHOR" ("NAME") ON DELETE CASCADE NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;