CREATE OR REPLACE FUNCTION CALCULATE_DISTANCE(
	LAT1 NUMBER,
	LON1 NUMBER,
	LAT2 NUMBER,
	LON2 NUMBER
) RETURN NUMBER IS
	R        NUMBER;
	DLAT     NUMBER;
	DLON     NUMBER;
	A        NUMBER;
	C        NUMBER;
	DISTANCE NUMBER;
BEGIN
	R := 6371; -- Earth's radius in kilometers
	DLAT := (LAT2 - LAT1) * 3.14159265358979323846 / 180;
	DLON := (LON2 - LON1) * 3.14159265358979323846 / 180;
	A := SIN(DLAT / 2) * SIN(DLAT / 2) + COS(LAT1 * 3.14159265358979323846 / 180) * COS(LAT2 * 3.14159265358979323846 / 180) * SIN(DLON / 2) * SIN(DLON / 2);
	C := 2 * ATAN2(SQRT(A), SQRT(1 - A));
	DISTANCE := R * C;
	RETURN DISTANCE;
END;
CREATE OR REPLACE FUNCTION GET_EMAIL_FROM_BOOKFRIENDID(ID IN NUMBER) RETURN VARCHAR2 IS
	EMAIL VARCHAR2(100);
BEGIN
	SELECT
		EMAILID INTO EMAIL
	FROM
		BOOKFRIEND
	WHERE
		BOOKFRIENDID=ID;
	RETURN EMAIL;
END;
CREATE OR REPLACE FUNCTION GET_EMAIL_FROM_OFFERID(ID IN NUMBER) RETURN VARCHAR2 IS
	EMAIL VARCHAR2(100);
BEGIN
	SELECT
		USEREMAILID INTO EMAIL
	FROM
		OFFER
	WHERE
		OFFERID=ID;
	RETURN EMAIL;
END;
CREATE OR REPLACE FUNCTION GET_LATITUDE_FROM_EMAIL(EMAIL IN VARCHAR2) RETURN NUMBER IS
	LAT NUMBER;
BEGIN
	SELECT
		LATITUDE INTO LAT
	FROM
		USERMAN
	WHERE
		EMAILID = EMAIL;
	RETURN LAT;
END;
CREATE OR REPLACE FUNCTION GET_LONGITUDE_FROM_EMAIL(EMAIL IN VARCHAR2) RETURN NUMBER IS
	LON NUMBER;
BEGIN
	SELECT
		LONGITUDE INTO LON
	FROM
		USERMAN
	WHERE
		EMAILID = EMAIL;
	RETURN LON;
END;
CREATE OR REPLACE FUNCTION GET_NAME_FROM_EMAILID(EMAIL IN VARCHAR2) RETURN VARCHAR2 IS
	NAME VARCHAR2(200);
BEGIN
	SELECT
		FIRSTNAME
		|| ' '
		|| LASTNAME INTO NAME
	FROM
		USERMAN
	WHERE
		EMAILID = EMAIL;
	RETURN NAME;
END;
CREATE OR REPLACE FUNCTION GET_NEXT_EXCHANGEID RETURN NUMBER IS
	ID NUMBER;
BEGIN
	SELECT
		MAX(EXCHANGEID) INTO ID
	FROM
		EXCHANGEOFFER;
	ID := ID + 1;
	RETURN ID;
END;
CREATE OR REPLACE FUNCTION GET_NEXT_ID_BOOKFRIEND RETURN NUMBER IS
	C   NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT
		MAX(BOOKFRIENDID) INTO C
	FROM
		BOOKFRIEND;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
CREATE OR REPLACE FUNCTION GET_NEXT_ID_DELIVARYMAN RETURN NUMBER IS
	C   NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT
		MAX(DELIVARYMANID) INTO C
	FROM
		DELIVARYMAN;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
CREATE OR REPLACE FUNCTION GET_NEXT_ID_NOTIFICATION1 RETURN NUMBER IS
	C   NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT
		MAX(NOTIFICATIONID) INTO C
	FROM
		NOTIFICATION1;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR';
END;
CREATE OR REPLACE FUNCTION GET_NEXT_OFFERID RETURN NUMBER IS
	ID NUMBER;
BEGIN
	SELECT
		MAX(OFFERID) INTO ID
	FROM
		OFFER;
	ID := ID + 1;
	RETURN ID;
END;
CREATE OR REPLACE FUNCTION GET_EMAIL_FROM_DELIVARYMANID(ID IN NUMBER) RETURN VARCHAR2 IS
	EMAIL VARCHAR2(100);
BEGIN
	SELECT
		EMAILID INTO EMAIL
	FROM
		DELIVARYMAN
	WHERE
		DELIVARYMANID=ID;
	RETURN EMAIL;
END;
CREATE OR REPLACE FUNCTION GET_CONTACT_FROM_EMAIL(EMAIL IN VARCHAR2) RETURN VARCHAR2 IS
	CONTACT VARCHAR2(100);
BEGIN
	SELECT
		CONTACTNO1 INTO CONTACT
	FROM
		USERMAN
	WHERE
		EMAILID=EMAIL;
	RETURN CONTACT;
END;
CREATE OR REPLACE FUNCTION GET_BOOK_NAME_FROM_OFFERID(ID IN NUMBER) RETURN VARCHAR2 IS
	BOOKNAME VARCHAR2(500);
BEGIN
	SELECT
		B.TITLE INTO BOOKNAME
	FROM
		BOOK  B
		JOIN OFFER O
		ON O.ISBN=B.ISBN
	WHERE
		O.OFFERID=ID;
	RETURN BOOKNAME;
END;