CREATE OR REPLACE FUNCTION CALCULATE_DISTANCE(
  lat1 NUMBER,
  lon1 NUMBER,
  lat2 NUMBER,
  lon2 NUMBER
) RETURN NUMBER IS
  R NUMBER;
  dLat NUMBER ;
  dLon NUMBER ;
  a NUMBER;
  c NUMBER;
  distance NUMBER ;
BEGIN
	R := 6371; -- Earth's radius in kilometers
  dLat := (lat2 - lat1) * 3.14159265358979323846 / 180;
  dLon := (lon2 - lon1) * 3.14159265358979323846 / 180;
  a := SIN(dLat / 2) * SIN(dLat / 2) +
              COS(lat1 * 3.14159265358979323846 / 180) *
              COS(lat2 * 3.14159265358979323846 / 180) *
              SIN(dLon / 2) * SIN(dLon / 2);
  c := 2 * ATAN2(SQRT(a), SQRT(1 - a));
  distance := R * c;
  RETURN distance;
END;


CREATE OR REPLACE FUNCTION GET_EMAIL_FROM_BOOKFRIENDID(ID IN NUMBER)
RETURN VARCHAR2 IS 
	EMAIL VARCHAR2(100);
BEGIN 
	SELECT EMAILID INTO EMAIL FROM BOOKFRIEND WHERE BOOKFRIENDID=ID;
	RETURN EMAIL;
END;



CREATE OR REPLACE FUNCTION GET_EMAIL_FROM_OFFERID(ID IN NUMBER)
RETURN VARCHAR2 IS 
	EMAIL VARCHAR2(100);
BEGIN 
	SELECT USEREMAILID INTO EMAIL FROM OFFER WHERE OFFERID=ID;
	RETURN EMAIL;
END;


CREATE OR REPLACE FUNCTION GET_LATITUDE_FROM_EMAIL(EMAIL IN VARCHAR2) 
RETURN NUMBER IS
	LAT NUMBER;
BEGIN 
	SELECT LATITUDE INTO LAT FROM USERMAN WHERE EMAILID = EMAIL;
	RETURN LAT;
END;


CREATE OR REPLACE FUNCTION GET_LONGITUDE_FROM_EMAIL(EMAIL IN VARCHAR2) 
RETURN NUMBER IS
	LON NUMBER;
BEGIN 
	SELECT LONGITUDE INTO LON FROM USERMAN WHERE EMAILID = EMAIL;
	RETURN LON;
END;


CREATE OR REPLACE FUNCTION GET_NAME_FROM_EMAILID(EMAIL IN VARCHAR2)
RETURN VARCHAR2 IS 
	NAME VARCHAR2(200);
BEGIN
	SELECT FIRSTNAME || ' ' || LASTNAME INTO NAME FROM USERMAN 
	WHERE EMAILID = EMAIL;
	RETURN NAME;
END;


CREATE OR REPLACE FUNCTION GET_NEXT_EXCHANGEID
RETURN NUMBER IS 
	ID NUMBER;
BEGIN 
	SELECT COUNT(EXCHANGEID) INTO ID FROM EXCHANGEOFFER;
	ID := ID + 1;
	RETURN ID;
END;


CREATE OR REPLACE FUNCTION GET_NEXT_ID_BOOKFRIEND
RETURN NUMBER IS 
	C NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT COUNT(BOOKFRIENDID) INTO C FROM BOOKFRIEND;
	C := C + 1001;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE FUNCTION GET_NEXT_ID_DELIVARYMAN
RETURN NUMBER IS 
	C NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT COUNT(DELIVARYMANID) INTO C FROM DELIVARYMAN;
	C := C + 1001;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE FUNCTION GET_NEXT_ID_NOTIFICATION1
RETURN NUMBER IS 
	C NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT COUNT(NOTIFICATIONID) INTO C FROM NOTIFICATION1;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE FUNCTION GET_NEXT_ID_NOTIFICATION2
RETURN NUMBER IS 
	C NUMBER;
	MSG VARCHAR2(50);
BEGIN
	SELECT COUNT(NOTIFICATIONID) INTO C FROM NOTIFICATION2;
	C := C + 1;
	RETURN C;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE FUNCTION GET_NEXT_OFFERID
RETURN NUMBER IS 
	ID NUMBER;
BEGIN 
	SELECT COUNT(OFFERID) INTO ID FROM OFFER;
	ID := ID + 1;
	RETURN ID;
END;