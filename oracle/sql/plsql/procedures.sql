CREATE OR REPLACE PROCEDURE ACCEPT_OFFER (OFFID IN NUMBER, MSG OUT VARCHAR2) IS
	C NUMBER;
	EMAIL VARCHAR2(100);
	TEMP VARCHAR2(20);
BEGIN
	SELECT STATUS INTO TEMP FROM OFFER
	WHERE OFFERID = OFFID;
	IF TEMP = 'offered' THEN
		UPDATE OFFER
		SET STATUS = 'pending'
		WHERE OFFERID = OFFID;
		MSG := 'CREATED';
	ELSE 
		MSG := 'FAILED';
	END IF;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ACCEPT_OFFER_FINALLY (OFFID IN NUMBER, MSG OUT VARCHAR2) IS
	C NUMBER;
	EMAIL VARCHAR2(100);
	TEMP VARCHAR2(20);
BEGIN
	SELECT STATUS INTO TEMP FROM OFFER
	WHERE OFFERID = OFFID;
	IF TEMP <> 'accepted' THEN
		UPDATE OFFER
		SET STATUS = 'accepted'
		WHERE OFFERID = OFFID;
		MSG := 'CREATED';
	ELSE 
		MSG := 'FAILED';
	END IF;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ADD_AUTHOR (NAME IN VARCHAR2, BORNON IN NUMBER, DIEDON IN NUMBER, TYP IN VARCHAR2, NAT IN VARCHAR2, MSG OUT VARCHAR2) IS 
BEGIN 
	INSERT INTO AUTHOR VALUES(NAME, BORNON, DIEDON, TYP, NAT);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ADD_BOOK (ISBN IN VARCHAR2, TITLE IN VARCHAR2, PC IN NUMBER, LAN IN VARCHAR2, PUBYEAR IN NUMBER, PRICE IN NUMBER, PUBLISHER IN VARCHAR2, SUMM IN VARCHAR2, GENRE IN VARCHAR2, MSG OUT VARCHAR2) IS 
BEGIN 
	INSERT INTO BOOK VALUES (ISBN, TITLE, PC, LAN, PUBYEAR, PRICE, NULL, PUBLISHER, SUMM, GENRE);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ADD_BOOK_WRITER (ISBN IN VARCHAR2, NAME IN VARCHAR2, MSG OUT VARCHAR2) IS 
BEGIN 
	INSERT INTO WRITTENBY VALUES (ISBN, NAME);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ADD_PUBLISHER(NAME IN VARCHAR2, ADDR IN VARCHAR2, MSG OUT VARCHAR2) IS 
BEGIN 
	INSERT INTO PUBLISHER VALUES (NAME, ADDR);
	MSG := 'ADDED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ADD_TO_BOOKFRIEND(EMAIL IN VARCHAR2, MSG OUT VARCHAR2) IS
BEGIN
	INSERT INTO BOOKFRIEND VALUES(GET_NEXT_ID_BOOKFRIEND, EMAIL);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE ADD_TO_DELIVARYMAN(EMAIL IN VARCHAR2, MSG OUT VARCHAR2) IS
BEGIN
	INSERT INTO DELIVARYMAN VALUES(GET_NEXT_ID_DELIVARYMAN, EMAIL);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE CONFIRM_DELIVARY(EID IN NUMBER, DELID IN NUMBER,FEE IN NUMBER, MSG OUT VARCHAR2) IS
BEGIN
	INSERT INTO DELIVARYOFFER VALUES(EID, DELID, FEE);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE CREATE_EXCHANGE_OFFER(OFFERID1 IN NUMBER, OFFERID2 IN NUMBER, MSG OUT VARCHAR2) IS
BEGIN
	INSERT INTO EXCHANGEOFFER VALUES(GET_NEXT_EXCHANGEID, OFFERID1, OFFERID2, 'PENDING');
	MSG := 'SUCCESS';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'ERROR';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE CREATE_NOTIFICATION1 (USERID IN NUMBER, OFFERID IN NUMBER, MSG OUT VARCHAR2) IS
	C NUMBER;
	EMAIL VARCHAR2(100);
	STAT VARCHAR(20);
BEGIN
	C := GET_NEXT_ID_NOTIFICATION1;
	STAT := 'show';
	EMAIL := GET_EMAIL_FROM_BOOKFRIENDID(USERID);
	INSERT INTO NOTIFICATION1 VALUES (C, EMAIL, OFFERID, STAT);
	MSG := 'NOTIFICATION1 SENT';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE CREATE_NOTIFICATION2 (USERID IN NUMBER, OFFERID IN NUMBER, MSG OUT VARCHAR2) IS
	C NUMBER;
	EMAIL VARCHAR2(100);
BEGIN
	C := GET_NEXT_ID_NOTIFICATION2;
	EMAIL := GET_EMAIL_FROM_BOOKFRIENDID(USERID);
	INSERT INTO NOTIFICATION2 VALUES (C, EMAIL, OFFERID, 'unread');
	MSG := 'NOTIFICATION2 SENT';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE CREATE_OFFER(MSG IN VARCHAR2, PHOTO IN VARCHAR2, ID IN NUMBER, ISBN IN VARCHAR2, MSG2 OUT VARCHAR2) IS
BEGIN 
	INSERT INTO OFFER VALUES (GET_NEXT_OFFERID, MSG, PHOTO, GET_EMAIL_FROM_BOOKFRIENDID(ID), ISBN, SYSTIMESTAMP, 'offered');
	MSG2 := 'OFFER CREATED';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG2 := 'ERROR';
	WHEN OTHERS THEN 
		MSG2 := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE PROCEDURE DISABLE_EXCHANGEOFFER (ID IN NUMBER, MSG OUT VARCHAR2) IS
BEGIN
	UPDATE EXCHANGEOFFER 
	SET STATUS = 'DONE'
	WHERE EXCHANGEID = ID;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE PROCEDURE DISABLE_NOTIFICATION (ID IN NUMBER, MSG OUT VARCHAR2) IS
BEGIN
	UPDATE NOTIFICATION1 
	SET STATUS = 'done'
	WHERE NOTIFICATIONID = ID;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;


CREATE OR REPLACE PROCEDURE NEW_ADDRESS(LATITUDE IN NUMBER, LONGITUDE IN NUMBER, MSG OUT VARCHAR2) IS 
BEGIN
	INSERT INTO ADDRESS VALUES (LATITUDE, LONGITUDE);
	MSG := 'DONE';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;



CREATE OR REPLACE PROCEDURE SIGNUP(EMAIL IN VARCHAR2, PASSWORD IN VARCHAR2, FIRSTNAME IN VARCHAR2, DATEOFBIRTH IN DATE, GENDER IN VARCHAR2, LASTNAME IN VARCHAR2, LATITUDE IN NUMBER, LONGITUDE IN NUMBER, CONTACTNO1 IN VARCHAR2, CONTACTNO2 IN VARCHAR2, MSG OUT VARCHAR2) IS
	M2 VARCHAR2(50);
BEGIN
	NEW_ADDRESS(LATITUDE, LONGITUDE, M2);
	INSERT INTO USERMAN VALUES(EMAIL, PASSWORD, FIRSTNAME, DATEOFBIRTH, GENDER, LASTNAME, LATITUDE, LONGITUDE, CONTACTNO1, CONTACTNO2);
	MSG := 'SUCCESSFUL';
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN 
		MSG := 'DUPLICATE';
	WHEN NO_DATA_FOUND THEN 
		MSG := 'NO DATA';
	WHEN TOO_MANY_ROWS THEN 
		MSG := 'MANY ROWS';
	WHEN INVALID_NUMBER THEN 
		MSG := 'CONVERSION FAILED';
	WHEN VALUE_ERROR THEN 
		MSG := 'VALUE ERROR';
	WHEN ZERO_DIVIDE THEN 
		MSG := '0 DEVIDE';
	WHEN OTHERS THEN 
		MSG := 'UNKNOWN ERROR';
END;
